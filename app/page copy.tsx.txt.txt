"use client"

//import Image from "next/image";
import React, { useState, useEffect, useRef } from "react";
//import styles from "./page.module.css";
//import styles from "./page.module.css";
//import asd from "./resources.arsc";
//import fs from 'fs';
//const fs = require('fs');
//import { promises as fs } from 'fs';

function Home() {

  //const [hexContent, setHexContent] = useState('');
  //const [hexContent, setHexContent] = useState<string[][]>([]);
  const [originalArray, setOriginalArray] = useState<string[]>([]);
  //let originalArray = []
  const [toShow, setToShow] = useState<string[]>([]);
  //let toDisplay = ''

  // const [originalArray, setOriginalArray] = useState([
  //   ['02', '00', '0c', '00', '5c', '93', 'fa', '00', '04', '00', '00', '00', '01', '00', '1c', '00'],
  //   ['84', '64', 'a8', '00', 'f6', '52', '02', '00', '1b', '05', '00', '00', '00', '01', '00', '00'],
  //   ['60', '60', '09', '00', 'cc', '12', 'a8', '00', '00', '00', '00', '00', '48', '00', '00', '00'],
  //   ['90', '00', '00', '00', '98', '00', '00', '00', 'b6', '00', '00', '00', 'cb', '00', '00', '00'],
  //   ['f0', '00', '00', '00', '00', '01', '00', '00', '17', '01', '00', '00', '48', '01', '00', '00'],
  // ]);
  //const fileInputRef = useRef(null);

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const arrayBuffer = e.target.result;
        //const hexString = arrayBufferToHex(arrayBuffer);
        const uint8Array = new Uint8Array(arrayBuffer);

        //console.log("ARRAY BUFFER", uint8Array)

        //let qq = new DataView(arrayBuffer)

        //console.log("NEW TEST")

        //const raw: string[] = Array.from(uint8Array, e => e.toString(16).padStart(2, '0') )
        setOriginalArray(Array.from(uint8Array, e => e.toString(16).padStart(2, '0')))

        // const raw: string[] = [
        //   '02', '00', '0c', '00', '5c', '93', 'fa', '00', '04', '00', '00', '00', '01', '00', '1c', '00',
        //   '84', '64', 'a8', '00', 'f6', '52', '02', '00', '1b', '05', '00', '00', '00', '01', '00', '00',
        //   '60', '60', '09', '00', 'cc', '12', 'a8', '00', '00', '00', '00', '00', '48', '00', '00', '00',
        //   '90', '00', '00', '00', '98', '00', '00', '00', 'b6', '00', '00', '00', 'cb', '00', '00', '00',
        //   'f0', '00', '00', '00', '00', '01', '00', '00', '17', '01', '00', '00', '48', '01', '00', '00',
        // ]

        //const raw: string[] = ['02','00','0c','00','5c','93','fa','00','04','00','00','00','01','00','1c','00']
        //const raw: string[] = ['0 0']


        //const raw2: string[] = [...raw]

        //setOriginalArray(raw);

        // for (let i = 16; i < raw2.length; i += 16) {
        //   //raw[i] = modificationFn(arr[i], i, arr);
        //   raw2[i] = `g${raw2[i]}`
        // }

        //console.log("RAW", raw)
        //console.log("RAW 2", raw2)

        //console.log("RAW 3", raw2.join(' ').split('g'))

        //setToShow(raw2.join(' ').split('\g'));
        
      };
      reader.readAsArrayBuffer(file);
    }
  };

  // const RES_NULL_TYPE                     = '0000'; // already little-endian
  // const RES_STRING_POOL_TYPE              = '0100'; //
  // const RES_TABLE_TYPE                    = '0200';
  // const RES_XML_TYPE                      = '0300';

  //   // Chunk types in RES_XML_TYPE
  // const RES_XML_FIRST_CHUNK_TYPE          = '0001';
  // const RES_XML_START_NAMESPACE_TYPE      = '0001';
  // const RES_XML_END_NAMESPACE_TYPE        = '0101';
  // const RES_XML_START_ELEMENT_TYPE        = '0201';
  // const RES_XML_END_ELEMENT_TYPE          = '0301';
  // const RES_XML_CDATA_TYPE                = '0401';
  // const RES_XML_LAST_CHUNK_TYPE           = '7f01';
  //   // This contains a uint32_t array mapping strings in the string
  //   // pool back to resource identifiers.  It is optional.
  // const RES_XML_RESOURCE_MAP_TYPE         = '8001';

  //   // Chunk types in RES_TABLE_TYPE
  // const RES_TABLE_PACKAGE_TYPE            = '0002';
  // const RES_TABLE_TYPE_TYPE               = '0102';
  // const RES_TABLE_TYPE_SPEC_TYPE          = '0202';
  // const RES_TABLE_LIBRARY_TYPE            = '0302';
  // const RES_TABLE_OVERLAYABLE_TYPE        = '0402';
  // const RES_TABLE_OVERLAYABLE_POLICY_TYPE = '0502';
  // const RES_TABLE_STAGED_ALIAS_TYPE       = '0602';

  // interface asd {
  //   ['string']: string
  // }

  // const obj: unknown = { // already little-endian
  //   '0000': 'RES_NULL_TYPE',
  //   '0100': 'RES_STRING_POOL_TYPE',
  //   '0200': {
  //     'n': 'ResTable_header', // name
  //     'cS': [2,4], // chunkSize // 12
  //     'nC': [4,8], // nextChunk
  //     'tP': [8,12] // total ResTable_packages
  //   },
  //   '0300': 'RES_XML_TYPE',
  //   '0001': 'RES_XML_FIRST_CHUNK_TYPE',
  //   //'0001': 'RES_XML_START_NAMESPACE_TYPE',
  //   '0101': 'RES_XML_END_NAMESPACE_TYPE',
  //   '0201': 'RES_XML_START_ELEMENT_TYPE',
  //   '0301': 'RES_XML_END_ELEMENT_TYPE',
  //   '0401': 'RES_XML_CDATA_TYPE',
  //   '7f01': 'RES_XML_LAST_CHUNK_TYPE',
  //   '8001': 'RES_XML_RESOURCE_MAP_TYPE',
  //   '0002': 'RES_TABLE_PACKAGE_TYPE',
  //   '0102': 'RES_TABLE_TYPE_TYPE',
  //   '0202': 'RES_TABLE_TYPE_SPEC_TYPE',
  //   '0302': 'RES_TABLE_LIBRARY_TYPE',
  //   '0402': 'RES_TABLE_OVERLAYABLE_TYPE',
  //   '0502': 'RES_TABLE_OVERLAYABLE_POLICY_TYPE',
  //   '0602': 'RES_TABLE_STAGED_ALIAS_TYPE',
  // }

  const [ dataToShow, setDataToShow ] = useState<unknown[]>([])
  const data = []
  //const [ data, setData ] = useState<unknown[]>([ `type: ResTable_header`, `chunkSize: 12`, `nextChunk: 16421724` ])

  const toHex = (fir, sec) => {
    return parseInt(originalArray.slice(i+fir,i+sec).reverse().join(''), 16)
  }

  const common = (type) => {
    //console.log('type: ', type) // name
    //console.log('chunkSize: ', toHex(2,4)) // chunkSize // 12
    //console.log('nextChunk: ', toHex(4,8)) // nextChunk
    //setDataToShow(curr => [...curr, `type: ${type}`, `chunkSize: ${toHex(2,4)}`, `nextChunk: ${toHex(4,8)}`])
    data.push([`type: ${type}, chunkSize: ${toHex(2,4)}, nextChunk: ${toHex(4,8)}`])
  }

  const obj: unknown = { // already little-endian
    '0000': 'RES_NULL_TYPE',
    '0100': () => {
      common('ResStringPool_header')
      const totalStrings: number = toHex(8,12)
      const totalStyles: number = toHex(12,16)
      
      //console.log('total Strings: ', totalStrings)
      //console.log('total Styles: ', totalStyles)
      //console.log('UTF-8 ?: ', toHex(16,20))
      //console.log('string start: ', toHex(20,24))
      //console.log('style start: ', toHex(24,28))

      data[data.length -1].push([` total Strings: ${totalStrings}, total Styles: ${totalStyles}, UTF-8 ?: ${toHex(16,20)}, string start: ${toHex(20,24)}, style start: ${toHex(24,28)} \n`])

      const stringIndices = []

      //const sSI = i+28 // startStringIndices
      i = i+28 // update index

      const stopIndexStrings = (totalStrings * 4) + i
      while (i < stopIndexStrings) {
        stringIndices.push(toHex(0,4))
        i+=4
      }
      //console.log('stringIndices: ', stringIndices)
      //const styleIndices = []
      const styleIndices = Array.from({ length: 100 }, (_, index) => index + 1)

      // const stopIndexStyles = (totalStyles * 4) + i
      // while (i < stopIndexStyles) {
      //   styleIndices.push(toHex(0,4))
      //   i+=4
      // }
      //console.log('styleIndices: ', styleIndices)

      data[data.length -1].push([` stringIndices: ${stringIndices}, styleIndices: ${styleIndices} \n`])

      //return i + 28
      //setDataToShow(data)
      return 43
    },
    '0200': () => {
      common('ResTable_header')
      //console.log('total ResTable_packages: ', toHex(8,12)) // total ResTable_packages
      //data.push([`total ResTable_packages: ${toHex(8,12)}`])
      data[data.length -1].push([` total ResTable_packages: ${toHex(8,12)} \n`])
      return 12
    },
    '0300': 'RES_XML_TYPE',
    '0001': 'RES_XML_FIRST_CHUNK_TYPE',
    //'0001': 'RES_XML_START_NAMESPACE_TYPE',
    '0101': 'RES_XML_END_NAMESPACE_TYPE',
    '0201': 'RES_XML_START_ELEMENT_TYPE',
    '0301': 'RES_XML_END_ELEMENT_TYPE',
    '0401': 'RES_XML_CDATA_TYPE',
    '7f01': 'RES_XML_LAST_CHUNK_TYPE',
    '8001': 'RES_XML_RESOURCE_MAP_TYPE',
    '0002': 'RES_TABLE_PACKAGE_TYPE',
    '0102': 'RES_TABLE_TYPE_TYPE',
    '0202': 'RES_TABLE_TYPE_SPEC_TYPE',
    '0302': 'RES_TABLE_LIBRARY_TYPE',
    '0402': 'RES_TABLE_OVERLAYABLE_TYPE',
    '0502': 'RES_TABLE_OVERLAYABLE_POLICY_TYPE',
    '0602': 'RES_TABLE_STAGED_ALIAS_TYPE',
  }

  const padStart = Math.ceil(originalArray.length / 16).toString().length

  //console.log("hexContent", originalArray)

  //console.log("toDisplay", toShow)

  // for (let i = 0; i < originalArray.length;) {
  //   console.log("Iteration number: " + i);
  //   //originalArray.slice(0,2).join('')
    
  //   console.log('type: ', obj[originalArray.slice(0,i+2).join('')])
  //   //console.log(i, byte length: originalArray.slice(i+2,i+4).reverse().join('') )
  //   //console.log(i, 'byte length', parseInt(originalArray.slice(i+2,i+4).reverse().join(''), 16) )
  //   console.log('byte length', parseInt(originalArray.slice(i+2,i+4).reverse().join(''), 16))
  //   i = parseInt(originalArray.slice(i+2,i+4).reverse().join(''), 16)

  // }
  let i = 0
  //while (i < originalArray.length) {
  // while (obj[originalArray.slice(i,i+2).join('')] !== undefined && i < originalArray.length) {
  //   console.log("Iteration number: " + i);
  //   //originalArray.slice(0,2).join('')
    
  //   console.log('type: ', obj[originalArray.slice(i,i+2).join('')])
  //   //console.log(i, byte length: originalArray.slice(i+2,i+4).reverse().join('') )
  //   //console.log(i, 'byte length', parseInt(originalArray.slice(i+2,i+4).reverse().join(''), 16) )
  //   //console.log('byte length', parseInt(originalArray.slice(i+2,i+4).reverse().join(''), 16))
  //   console.log('next chunk', parseInt(originalArray.slice(i+2,i+4).reverse().join(''), 16))
  //   i = parseInt(originalArray.slice(i+2,i+4).reverse().join(''), 16)
  // }

  // while (obj[originalArray.slice(i,i+2).join('')] !== undefined) {
  //   console.log("Iteration number: " + i);
  //   //originalArray.slice(0,2).join('')

  //   let target = originalArray.slice(i,i+2).join('') // target
    
  //   // console.log('name: ', t.n)
  //   // //console.log(i, byte length: originalArray.slice(i+2,i+4).reverse().join('') )
  //   // //console.log(i, 'byte length', parseInt(originalArray.slice(i+2,i+4).reverse().join(''), 16) )
  //   // //console.log('byte length', parseInt(originalArray.slice(i+2,i+4).reverse().join(''), 16))
  //   // console.log('chunkSize:', parseInt(originalArray.slice(i+t.cS[0],i+t.cS[1]).reverse().join(''), 16))
  //   // console.log('nextChunk:', parseInt(originalArray.slice(i+t.nC[0],i+t.nC[1]).reverse().join(''), 16))
  //   // console.log('ResTable_packages total:', parseInt(originalArray.slice(i+t.tP[0],i+t.tP[1]).reverse().join(''), 16))
  //   //i = parseInt(originalArray.slice(i+2,i+4).reverse().join(''), 16)
  //   //console.log("I BEFORE", i)
  //   i = obj[target]()
  //   //console.log("TARGET", typeof target)
  //   //console.log("I AFTER", i)
  //   //i = 43
  //   //if (i === 43) setDataToShow(data)
  // }

  // useEffect(() => {
  //   setDataToShow(data)
  // }, [])

  return (
    <div /* style={{ display: 'flex', flexDirection: 'row'}} */>
      
        <div>
          <input type="file" onChange={handleFileChange} />
          <h3>Hexadecimal Content:</h3>
          <div style={{ /* whiteSpace: 'pre-wrap', */ fontFamily: 'monospace', /* fontSize: 'large', */ background: 'lavender',
            /* width: 'fit-content', */ /* lineHeight: '16px', */ width: '48ch',
            fontSize: '16px'
            /* , minWidth: 'max-content' */ }}>

            {
              // /* hexContent.join(' ') */
              // //hexContent.join("\n")
              // //toShow.join("\n")
              // //toShow.join(" ")
              // toShow.map((item, index) => {
              //   //return `${`${(++index)}`.padStart(newPadStart, '0')}. ${item}`; // Adds 1 to index for 1-based numbering
              //   //return `${`${(index+1)}`.padStart(padStart, '0')}: ${item}`; // Adds 1 to index for 1-based numbering
              //   return `${item}`; // Adds 1 to index for 1-based numbering
              //   //return `${item}`; // Adds 1 to index for 1-based numbering
              // }).join("\n")

              //originalArray.map(e => `${e} `)
              originalArray.join(' ')
              //originalArray.map(e => e).join(' ')

            }

            

          </div>
        </div>

        {/* <div style={{ whiteSpace: 'pre-wrap', fontFamily: 'monospace', fontSize: 'large', background: 'lightblue', width: 'fit-content', overflowWrap: 'anywhere' }}>
          {

              //dataToShow.map(e => e).join("\n")
              //data.map(e => e).join("\n")
            }
        </div> */}
      
    </div>
  );

}

export default Home;